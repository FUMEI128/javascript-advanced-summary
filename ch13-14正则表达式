标准的内置对象（Array）
一，Array上的常用原型方法：
Array.prototype.forEach(callback,thisValue)
二，正则表达式
1，创建正则表达式

1）使用new运算符
var box=new RegExp(字符串,模式修饰符)
2）使用字面量方式:/pattern/flags

注意：使用new运算符来创建正则表达式的时候，要进行字符串的转义，我们常用的基本是字面量创建的方法。

2，正则表达式符号
每个正则表达式可以带一个或多个标志（flags），标明正则表达式的行为
i:忽略大小写
g:全局匹配
m:多行匹配
元字符的使用，在需要转义的字符前写，比如常见的. \ / * ? [] () {} ^ \ $ -
转义字符为\

3,正则方法：
1）RegExp原型方法：
test()检测是否匹配成功，返回值是布尔类型
exec（）方法，放回的是一个数组，里面记录的是匹配到的字符串的相关情况，匹配的字符串，下标等情况。

2）String原型方法：
replace(old,new)将匹配到的字符串替换为其他的自定义的字符串,放回的是一个新的字符串，不会将原来的字符串改变

match()放回匹配的字串，返回也是一个数组，和exec的效果类似

search()匹配到第一次出现的正则表达式，放回其下标，为匹配到就放回-1，与IndexOf()作用类似，但indexOf()不支持正则表达式。

split（）方法,对原字符串进行拆分，返回拆的字串数组。

4，元字符是拥有特殊含义的字符
常见的元字符为:
.     匹配任意字符，换行符除外
\w   匹配字母，数字，下划线
\W   与\w相反

\d   匹配数字
\D 匹配非数字

\s   匹配空格字符
\S  匹配非空格字符
\n  匹配换行符

----------------------------

锚字符 用于查找某个位置
^  匹配字符串的开头
$  匹配字符串的结尾
\b 匹配字符串的边界
\B 匹配字符串的非边界

零宽断言:
（？=exp）匹配其后紧接exp的字符串
(?exp)  匹配其后没有紧跟exp的字符串

--------------------------------------

方括号:用于查找某个范围内的字符
[abc] 匹配方括号中的字符串中的任何一个字符
[^abc]匹配以abc开头的字符串
[0-9]匹配任何0-9范围内的数字
[A-Z]同[0-9]的效果一样
边界是在\w和\W之间的位置

-------------------------------------
量词定义字符出现的频次的字符
n+匹配任何至少一个n的字符串
n*匹配包含零个或多个n的字符串
n? 匹配0或1个n的字符串
n{x}包含x个n的序列的字符串
默认匹配的次数是最多的，贪婪匹配，变成惰性匹配只需要在它们的后面加上?.
