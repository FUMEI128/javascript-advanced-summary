第九周 拷贝和继承
一，函数内方法与prototype方法
方法写在构造函数内--》函数内方法
方法写在prototype内--》prototype方法

两种方法的优缺点：
函数内方法每次实例化对象的时候都会重新开辟一块空间，每一个实例对象都会克隆构造函数的方法，这样会导致内存消耗过大的问题，浪费空间资源，可以访问函数内的私有变量。
prototype方法：方法定义在prototype上，所有的实例对象都会共享该方法，但是不可以访问函数内部的私有变量

二，递归

三，深浅拷贝
1，浅拷贝：拷贝基本类型的值，拷贝引用类型的地址
拷贝过程：
先新建一个空对象--》遍历目标对象--》将目标对象的里面的内容对赋值给新的对象


2，深拷贝：浅拷贝+递归，拷贝基本类型的值，递归爸所有的父对象中的所有属于引用类型的对象都遍历将值赋给子对象而不是地址
拷贝过程：创建新的对象--》判断目标对象中的属性的数据类型--》如果是基本数据类型就直接拷贝--》如果是引用数据类型递归赋值

深浅拷贝的最跟本的区别是否真的获取一个对象的复制实体，而不是引用，意思是，浅拷贝对于引用数据类型是复制的新对象是获得原来对象中引用数据类型的引用，而深拷贝只是获得和源对象里面内容一样的一个新对象。

四，继承
继承的常见形式：
1，原型继承：也就是原型链继承
缺点：所有的子对象共用一条原型链，如果通过一个实例修改原型链，那所有的实例访问到的值都会被修改
通过修改子函数的prototype为其他一个函数的实例对象，这样就将两个不相关的函数联系在一起，子函数就可以访问到父函数的里面的属性和方法

特点：访问父级函数两次
2,构造继承（call继承）
在子级构造函数内调用父级构造函数，通过call，修改里面this得指向，使父级构造函数得this指向子级构造函数得实例对象，这样通过实例对象传得值，操作得函数实际是父级构造函数。
子级函数实例对象直接可以操作父级实例对象，可以传参。
但是子级函数得实例对象无法继承父级得原型属性和方法。

特点：访问父级函数一次

3，组合继承（原型继承+构造继承）

4，原型式继承（类似原型继承）
原型式继承不需要定义一个构造函数，传入参数obj，生成一个继承obj对象的对象。需要封装一个函数

Object.create(obj)创建一个新的对象，使用现有的对象来提供新创建的对象的__proto__
创建一个新的对象，该对象的__proto__指向obj.prototype

5，寄生式继承
在原型式继承的基础上，可以在函数内部以某种方来增强对象（添加方法或属性），最后返回对象

6，寄生组合继承（寄生式继承+构造继承）
